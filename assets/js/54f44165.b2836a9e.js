"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[924],{4575:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"getting-started/installation","title":"Linux Installation","description":"Quick Start","source":"@site/docs/getting-started/installation.md","sourceDirName":"getting-started","slug":"/getting-started/installation","permalink":"/docs/getting-started/installation","draft":false,"unlisted":false,"editUrl":"https://github.com/tangledprogramgraphs/docs/tree/main/docs/getting-started/installation.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docs","previous":{"title":"Introduction","permalink":"/docs/"},"next":{"title":"Dev Containers Installation","permalink":"/docs/getting-started/dev-container"}}');var s=t(4848),r=t(8453);const a={sidebar_position:1},l="Linux Installation",o={},d=[{value:"Quick Start",id:"quick-start",level:2},{value:"1. Install required software",id:"1-install-required-software",level:3},{value:"2. Set environment variables",id:"2-set-environment-variables",level:3},{value:"3. Compile",id:"3-compile",level:3}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"linux-installation",children:"Linux Installation"})}),"\n",(0,s.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,s.jsxs)(n.p,{children:["This code is designed to be used in Linux. If you use Windows, you can use Windows Subsystem for Linux (WSL). You can work with WSL in Visual Studio Code by following ",(0,s.jsx)(n.a,{href:"https://code.visualstudio.com/docs/remote/wsl-tutorial",children:"this tutorial"}),". Run this to automatically install all dependencies and compile:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"bash ./setup.sh\n"})}),"\n",(0,s.jsx)(n.p,{children:"This performs the setup and compilation of the steps below. If you want to manually install, follow the instructions below."}),"\n",(0,s.jsxs)(n.p,{children:["For MacOS or Windows users, you can follow this ",(0,s.jsx)(n.a,{href:"/docs/getting-started/dev-container",children:"guide"})," to setup Dev Containers which spins up a Linux based environment right within VS Code."]}),"\n",(0,s.jsx)(n.h3,{id:"1-install-required-software",children:"1. Install required software"}),"\n",(0,s.jsxs)(n.p,{children:["From the ",(0,s.jsx)(n.a,{href:"https://github.com/tangledprogramgraphs/framework",children:"framework"})," directory run:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"sudo xargs --arg-file requirements.txt apt install\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Note that ",(0,s.jsx)(n.a,{href:"https://mujoco.org/",children:"MuJoco"})," must be downloaded and unpacked separately."]}),"\n",(0,s.jsx)(n.h3,{id:"2-set-environment-variables",children:"2. Set environment variables"}),"\n",(0,s.jsxs)(n.p,{children:["In order to easily access tpg scripts, we add appropriate folders to the $PATH environment variable.\nTo do so, add the following to ",(0,s.jsx)(n.em,{children:"~/.profile"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"export TPG=<YOUR_PATH_HERE>/tpg\nexport PATH=$PATH:$TPG/scripts/plot\nexport PATH=$PATH:$TPG/scripts/run\nexport MUJOCO=<YOUR_PATH_TO_MUJOCO>/mujoco-3.2.2\nexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$MUJOCO/lib/\n"})}),"\n",(0,s.jsx)(n.p,{children:"Then run:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"source ~/.profile\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-compile",children:"3. Compile"}),"\n",(0,s.jsx)(n.p,{children:"From the tpg directory run:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cmake -B build -S . -DCMAKE_BUILD_TYPE=Release\ncmake --build build --config Release\n"})}),"\n",(0,s.jsx)(n.p,{children:"To run in debug mode:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cmake -B build -S . -DCMAKE_BUILD_TYPE=Debug\ncmake --build build\n"})}),"\n",(0,s.jsx)(n.p,{children:"To run the build with compiler optimization flags:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cmake -B build -S . -DCMAKE_BUILD_TYPE=Release -DENABLE_HIGH_OPTIMIZATION=ON\ncmake --build build\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Additionally, you can use the ",(0,s.jsx)(n.code,{children:"Makefile"})," to build TPG as well."]}),"\n",(0,s.jsx)(n.p,{children:"To build in debug mode:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"make debug\n"})}),"\n",(0,s.jsx)(n.p,{children:"To build in release mode:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"make release\n"})}),"\n",(0,s.jsx)(n.p,{children:"To build with optimized flags:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"make optimized\n"})}),"\n",(0,s.jsx)(n.p,{children:"To clean the Build:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"make clean\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var i=t(6540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);