"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[57],{7363:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"guides/experiments","title":"CLI Experiment Execution","description":"This project provides a Python command-line interface (CLI) powered by","source":"@site/docs/guides/experiments.md","sourceDirName":"guides","slug":"/guides/experiments","permalink":"/docs/guides/experiments","draft":false,"unlisted":false,"editUrl":"https://github.com/tangledprogramgraphs/docs/tree/main/docs/guides/experiments.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docs","previous":{"title":"Dev Containers Installation","permalink":"/docs/getting-started/dev-container"},"next":{"title":"DRA Experiment Execution","permalink":"/docs/guides/dra"}}');var r=i(4848),t=i(8453);const l={sidebar_position:1},o="CLI Experiment Execution",c={},d=[{value:"Features",id:"features",level:2},{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2}];function a(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"cli-experiment-execution",children:"CLI Experiment Execution"})}),"\n",(0,r.jsxs)(n.p,{children:["This project provides a Python command-line interface (CLI) powered by\n",(0,r.jsx)(n.a,{href:"https://click.palletsprojects.com/",children:"Click"})," to manage experiments for evolving,\nplotting, and replaying policies. The tool leverages MPI through ",(0,r.jsx)(n.code,{children:"mpirun"})," to execute\nthe underlying experiments defined in the TPG framework."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," This CLI tool expects that you have the TPG binaries built (specifically,\nthe ",(0,r.jsx)(n.code,{children:"TPGExperimentMPI"})," executable) and that you provide a configuration context\n(via ",(0,r.jsx)(n.code,{children:"ctx.obj"}),") containing appropriate values for:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:"hyper_parameters"}),":"]})," A dictionary mapping supported environment names to their\nrespective parameter files."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:"tpg"}),":"]})," The $TPG environment variable that is the root of the TPG codebase"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Evolve a Policy:"})," Launch an MPI run to evolve a policy for a specified environment."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Replay a Policy:"})," Replay the best performing policy based on experiment outputs."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Plot Results:"})," Plot statistics about experiments."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsxs)(n.p,{children:["Ensure that you have ",(0,r.jsx)(n.code,{children:"pipx"})," installed:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo apt install pipx\n"})}),"\n",(0,r.jsx)(n.p,{children:"To utilize this CLI tool anywhere in the repo:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cd $TPG/src/cli\npipx install --editable .\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," The ",(0,r.jsx)(n.code,{children:"--editable"})," flag allows this package to be editable. We can modify the source code and have those changes immediately installed without having to reinstall the package after making a change."]}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(n.p,{children:"Here are the main commands."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Evolve a Policy:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cd $TPG/experiments/generic\ntpg evolve ENV_NAME\n"})}),"\n",(0,r.jsx)(n.p,{children:"This command will:"}),"\n",(0,r.jsxs)(n.p,{children:["Verify that the given ",(0,r.jsx)(n.code,{children:"ENV_NAME"})," is supported (as defined in your hyper_parameters).\nBuild a command to launch the TPG experiment using mpirun with the specified number of processes.\nRedirect logs about the experiment to the ",(0,r.jsx)(n.code,{children:"$TPG/experiments/ENV_NAME/logs"})," directory. There are subdirectories for each stage of the evolutionary training process: ",(0,r.jsx)(n.code,{children:"replacement"}),", ",(0,r.jsx)(n.code,{children:"removal"}),", ",(0,r.jsx)(n.code,{children:"selection"}),", and ",(0,r.jsx)(n.code,{children:"timing"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"env (str): The target environment"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Options:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(-s) seed (int): Specifying a specific random number to run"}),"\n",(0,r.jsx)(n.li,{children:"(-p) processes (int): Specifying the number of parallel processes to run, this value defaults to 4"}),"\n",(0,r.jsxs)(n.li,{children:["(-n) num-experiments (int): Specifying the number of experiments to executes. Note: there is no need to specify a seed with the ",(0,r.jsx)(n.code,{children:"-s"})," option if you use the ",(0,r.jsx)(n.code,{children:"-n"})," option because it generates the seeds in a loop."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Here are the environments currently supported:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"classic_control"}),"\n",(0,r.jsx)(n.li,{children:"half_cheetah"}),"\n",(0,r.jsx)(n.li,{children:"hopper"}),"\n",(0,r.jsx)(n.li,{children:"humanoid_standup"}),"\n",(0,r.jsx)(n.li,{children:"inverted_pendulum"}),"\n",(0,r.jsx)(n.li,{children:"inverted_double_pendulum"}),"\n",(0,r.jsx)(n.li,{children:"multitask"}),"\n",(0,r.jsx)(n.li,{children:"multitask_half_cheetah"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," The environments supported are related to the yaml files present within ",(0,r.jsx)(n.code,{children:"$TPG/src/configs"}),". The naming convention is extracting the string after ",(0,r.jsx)(n.code,{children:"MuJoco_"})," and making everything lowercase and snakecase."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example:"}),"\nRunning 3 experiemnts of the ",(0,r.jsx)(n.code,{children:"inverted_pendulum"})," environment with 3 different seeds."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"tpg evolve inverted_pendulum -n 3\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Plot Results from an Environment"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"tpg plot ENV_NAME CSV_FILES COLUMN_NAME\n"})}),"\n",(0,r.jsx)(n.p,{children:"This plotting command will:"}),"\n",(0,r.jsx)(n.p,{children:"Generate a plot based on the CSV data provided from a previous evolution run.\nUtilize the specified column from the CSV for plotting."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Arguments:"}),"\nenv (str): The target environment.\ncsv_files (str): The path to the CSV files containing the results.\ncolumn_name (str): The name of the column to plot."]}),"\n",(0,r.jsxs)(n.p,{children:["For more information regarding arguments ",(0,r.jsx)(n.code,{children:"csv_files"})," and ",(0,r.jsx)(n.code,{children:"column_name"}),", visit our ",(0,r.jsx)(n.a,{href:"https://gitlab.cas.mcmaster.ca/kellys32/tpg/-/wikis/TPG-Generation-Plot-for-CSV-Logging-Files",children:"Wiki"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"tpg plot half_cheetah all-timing generation_time\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Options:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"--processes (int): Number of processes to use (default: 4)."}),"\n",(0,r.jsx)(n.li,{children:"--seed (int): Random seed (default: 42)."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Replay the Best Policy:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"tpg replay ENV_NAME\n"})}),"\n",(0,r.jsx)(n.p,{children:"The replay command:"}),"\n",(0,r.jsxs)(n.p,{children:["Scans for a selection.",(0,r.jsx)(n.em,{children:"."}),".csv file (generated from a previous evolve run).\nUses helper functions to extract the best performing team's ID and checkpoint information.\nLaunches an MPI run in replay mode with the given parameters. If running in a Dev Containers environment, MP4 replays would be populated within the ",(0,r.jsx)(n.code,{children:"$TPG/experiments/{env}/videos"})," directory."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"env (str): The target environment"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Options:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(-s) seed (int): Replaying a specific seed for that environment"}),"\n",(0,r.jsx)(n.li,{children:"(--seed-aux) auxillary seed (int): An auxiliary seed (default: 42) used in the replay; its exact role is determined by the underlying experiment logic."}),"\n",(0,r.jsx)(n.li,{children:"(-t) task to replay (int): Option for multitask experiments which task to visualize"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"tpg replay inverted_pendulum -s 2\n"})}),"\n",(0,r.jsx)(n.p,{children:"This command would replay the best policy from a previously evolved experiment from a seed with value 2."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Cleanup the Experiment Directory:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"tpg clean ENV_NAME\n"})}),"\n",(0,r.jsx)(n.p,{children:"The clean command:"}),"\n",(0,r.jsx)(n.p,{children:"Removes the directory associated with the specified environment."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"env (str): The target environment"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"tpg clean inverted_pendulum\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Kill the Evolution of an Experiment:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"tpg kill ENV_NAME\n"})}),"\n",(0,r.jsx)(n.p,{children:"The kill command:"}),"\n",(0,r.jsx)(n.p,{children:"Kills the processes running the specified environment, or kills all running processes if no environment is specified."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"env (str): The target environment (optional; will kill all experiment processes if no environment is specified)"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"tpg kill inverted_pendulum\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Enter Debug Mode:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"tpg debug ENV_NAME\n"})}),"\n",(0,r.jsx)(n.p,{children:"The debug command:"}),"\n",(0,r.jsx)(n.p,{children:"Creates an OpenGL GDB window that will allow for debugging of the environment."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"env (str): The target environment"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Options:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(-s) seed (int): Replaying a specific seed for that environment (default: 42)"}),"\n",(0,r.jsx)(n.li,{children:"(--seed-aux) auxillary seed (int): An auxiliary seed (default: 42) used in the debug; its exact role is determined by the underlying experiment logic."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"tpg debug inverted_pendulum\n"})}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsxs)(n.p,{children:["If attempting to execute a tpg command leads you to an error such as: ",(0,r.jsx)(n.code,{children:"Command 'tpg' not found"}),", ensure your PATH\nenvironment variables are up to date. You can do this by running:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pipx ensurepath\n"})}),"\n",(0,r.jsx)(n.p,{children:"After running this command, restart your terminal for the changes to take effect."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>o});var s=i(6540);const r={},t=s.createContext(r);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);