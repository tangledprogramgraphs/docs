"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[950],{735:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"future-work","title":"Future Work","description":"This page outlines the planned improvements and future directions for the Tangled Program Graphs framework. We welcome contributions and feedback on these initiatives.","source":"@site/docs/future-work.md","sourceDirName":".","slug":"/future-work","permalink":"/docs/future-work","draft":false,"unlisted":false,"editUrl":"https://github.com/tangledprogramgraphs/docs/tree/main/docs/future-work.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"docs","previous":{"title":"DRA Experiment Execution","permalink":"/docs/guides/dra"}}');var t=i(4848),s=i(8453);const a={sidebar_position:5},o="Future Work",c={},l=[{value:"System Architecture and Infrastructure",id:"system-architecture-and-infrastructure",level:2},{value:"Microservices Orchestration",id:"microservices-orchestration",level:3},{value:"Digital Research Alliance (DRA) Experiment Integration",id:"digital-research-alliance-dra-experiment-integration",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"GPU Acceleration",id:"gpu-acceleration",level:3},{value:"Algorithm Improvements and Multi-Task Learning",id:"algorithm-improvements-and-multi-task-learning",level:2},{value:"Multi-Task Learning Enhancements",id:"multi-task-learning-enhancements",level:3},{value:"Get Involved",id:"get-involved",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"future-work",children:"Future Work"})}),"\n",(0,t.jsx)(n.p,{children:"This page outlines the planned improvements and future directions for the Tangled Program Graphs framework. We welcome contributions and feedback on these initiatives."}),"\n",(0,t.jsx)(n.h2,{id:"system-architecture-and-infrastructure",children:"System Architecture and Infrastructure"}),"\n",(0,t.jsx)(n.h3,{id:"microservices-orchestration",children:"Microservices Orchestration"}),"\n",(0,t.jsx)(n.p,{children:"The framework is being restructured into a service-oriented architecture with clear separation of concerns. The current architecture looks like this:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Current Architecture: API wraps CLI commands, which then wrap mpirun commands to execute C++ binaries compiled from the engine",src:i(7277).A+"",width:"946",height:"466"})}),"\n",(0,t.jsx)(n.p,{children:"This architecture represents a significant migration from the current implementation where the API wraps CLI commands. The new design:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Eliminates the CLI dependency in the API service"}),"\n",(0,t.jsx)(n.li,{children:"Enables direct interaction with C++ binaries"}),"\n",(0,t.jsx)(n.li,{children:"Improves performance by removing unnecessary process spawning"}),"\n",(0,t.jsx)(n.li,{children:"Reduces complexity in the API service implementation"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The planned architecture reorganizes these components into:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Planned Architecture: Framework repository contains engine, binaries, and API service. CLI communicates via network requests",src:i(7662).A+"",width:"1060",height:"338"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.a,{href:"https://github.com/TangledProgramGraphs/framework",children:"Framework Repository"}),":"]})," Contains the C++ engine code, build system, and API service. This unified repository produces both the C++ binaries and the API service that directly interfaces with them."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.a,{href:"https://github.com/TangledProgramGraphs/cli",children:"CLI Repository"}),":"]})," A Python-based command-line interface distributed as a pip package. The CLI communicates with the API service via HTTP requests (e.g., ",(0,t.jsx)(n.code,{children:"tpg evolve <env>"})," triggers a POST to ",(0,t.jsx)(n.code,{children:"your-service-url/evolve"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"API Service:"})," Acts as an intermediary service that supports multiple execution modes:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Live-Streaming Mode:"})," Used by web clients (e.g., Playground) to receive real-time updates via WebSocket connections"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Non Live-Streaming Mode:"})," Used by the CLI for batch processing and non-interactive tasks"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Business Logic"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Routes requests to the appropriate build mode based on the client type"}),"\n",(0,t.jsx)(n.li,{children:"Executes C++ binaries on the server"}),"\n",(0,t.jsx)(n.li,{children:"Manages WebSocket connections for live-streaming clients"}),"\n",(0,t.jsx)(n.li,{children:"Returns results to clients"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This architecture decouples the CLI from the engine's execution environment, enabling:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Independent distribution of the CLI package"}),"\n",(0,t.jsx)(n.li,{children:"Remote execution of computationally intensive tasks"}),"\n",(0,t.jsx)(n.li,{children:"Scalable deployment of the API service"}),"\n",(0,t.jsx)(n.li,{children:"Clear separation of concerns between components"}),"\n",(0,t.jsx)(n.li,{children:"Flexible execution modes for different client types"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Key implementation challenges include:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Managing service dependencies and versioning"}),"\n",(0,t.jsx)(n.li,{children:"Ensuring reliable communication between components"}),"\n",(0,t.jsx)(n.li,{children:"Implementing robust error handling and monitoring"}),"\n",(0,t.jsx)(n.li,{children:"Maintaining security across service boundaries"}),"\n",(0,t.jsx)(n.li,{children:"Coordinating different build modes and their respective client interactions"}),"\n",(0,t.jsx)(n.li,{children:"Migrating existing API endpoints from CLI command wrapping to direct binary interaction"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"digital-research-alliance-dra-experiment-integration",children:"Digital Research Alliance (DRA) Experiment Integration"}),"\n",(0,t.jsxs)(n.p,{children:["We plan to integrate a comprehensive system for managing and analyzing DRA experiments within ",(0,t.jsx)(n.a,{href:"https://github.com/TangledProgramGraphs/playground",children:"TPG Playground"}),". This will involve:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Automated Experiment Data Upload:"})," Implementing automated data upload to a centralized database after each DRA experiment is completed (either automatically or manually triggered via the CLI)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Experiment Database:"})," Developing a robust database schema to store experiment metadata, results, configurations, and environment seeds."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Interactive Experiment Analysis:"})," Creating an interface that allows researchers to:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"View experiment results, replay simulations by seed and environment, and generate relevant plots."}),"\n",(0,t.jsx)(n.li,{children:"Search and filter experiments based on various criteria."}),"\n",(0,t.jsx)(n.li,{children:"Compare experiment performance and configurations."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This DRA integration is a substantial engineering undertaking that will greatly enhance the reproducibility, analysis, and sharing of research results."}),"\n",(0,t.jsx)(n.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,t.jsx)(n.h3,{id:"gpu-acceleration",children:"GPU Acceleration"}),"\n",(0,t.jsx)(n.p,{children:"Continued research and investigation into leveraging GPUs to significantly improve framework performance, focusing on:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Parallel Evaluation:"})," Implementing GPU-accelerated parallel evaluation of TPG agents to optimize evolution time."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Memory Management:"})," Optimizing memory transfer and management between CPU and GPU."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"algorithm-improvements-and-multi-task-learning",children:"Algorithm Improvements and Multi-Task Learning"}),"\n",(0,t.jsx)(n.h3,{id:"multi-task-learning-enhancements",children:"Multi-Task Learning Enhancements"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Novel GP Approaches:"})," Investigating alternative genetic programming approaches to boost the diversity, specialization, and competition of components within MTRL-TPG."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Selection and Mutation Improvements:"})," Enhance selection and mutation strategies to make the algorithms smarter in determining convergence rate."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"get-involved",children:"Get Involved"}),"\n",(0,t.jsx)(n.p,{children:"We welcome contributions from the community! If you're interested in working on any of these areas or have suggestions for additional improvements, please:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Check our ",(0,t.jsx)(n.a,{href:"https://github.com/tangledprogramgraphs",children:"GitHub repository"})]}),"\n",(0,t.jsx)(n.li,{children:"Review our contribution guidelines"}),"\n",(0,t.jsx)(n.li,{children:"Join our community discussions"}),"\n",(0,t.jsx)(n.li,{children:"Submit pull requests with your improvements"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This roadmap is continuously evolving, and we welcome feedback and suggestions from our user community."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},7277:(e,n,i)=>{i.d(n,{A:()=>r});const r=i.p+"assets/images/current-arch-9822de3a1b37a77ffe4db5a31337edab.png"},7662:(e,n,i)=>{i.d(n,{A:()=>r});const r=i.p+"assets/images/planned-arch-d03172e88a866cd691876d9971c94e69.png"},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var r=i(6540);const t={},s=r.createContext(t);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);